<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Socket.IO Chat Example</title>

    <style type="text/css">
        * {
            box-sizing: border-box;
        }

        html {
            font-weight: 300;
            -webkit-font-smoothing: antialiased;
        }

        html,
        input {
            font-family:
                "HelveticaNeue-Light",
                "Helvetica Neue Light",
                "Helvetica Neue",
                Helvetica,
                Arial,
                "Lucida Grande",
                sans-serif;
        }

        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        ul {
            list-style: none;
            word-wrap: break-word;
        }

        /* Pages */

        .pages {
            height: 100%;
            margin: 0;
            padding: 0;
            width: 100%;
        }

        .page {
            height: 100%;
            position: absolute;
            width: 100%;
        }

        /* Login Page */

        .login.page {
            background-color: #000;
        }

        .login.page .form {
            height: 100px;
            margin-top: -100px;
            position: absolute;

            text-align: center;
            top: 50%;
            width: 100%;
        }

        .login.page .form .usernameInput {
            background-color: transparent;
            border: none;
            border-bottom: 2px solid #fff;
            outline: none;
            padding-bottom: 15px;
            text-align: center;
            width: 400px;
        }

        .login.page .title {
            font-size: 200%;
        }

        .login.page .usernameInput {
            font-size: 200%;
            letter-spacing: 3px;
        }

        .login.page .title,
        .login.page .usernameInput {
            color: #fff;
            font-weight: 100;
        }

        /* Chat page */

        /*
        .chat.page {
            display: none;
        }
*/

        /* Font */

        .messages {
            font-size: 150%;
        }

        .inputMessage {
            font-size: 100%;
        }

        .log {
            color: gray;
            font-size: 70%;
            margin: 5px;
            text-align: center;
        }

        /* Messages */

        .chatArea {
            height: 100%;
            padding-bottom: 60px;
        }

        .messages {
            height: 100%;
            margin: 0;
            overflow-y: scroll;
            padding: 10px 20px 10px 20px;
        }

        .message.typing .messageBody {
            color: gray;
        }

        .username {
            font-weight: 700;
            overflow: hidden;
            padding-right: 15px;
            text-align: right;
        }

        /* Input */

        .inputMessage {
            border: 10px solid #000;
            bottom: 0;
            height: 60px;
            left: 0;
            outline: none;
            padding-left: 10px;
            position: absolute;
            right: 0;
            width: 100%;
        }

    </style>

</head>

<body>
    <form id="form" action="">
        <ul class="pages">
            <li class="chat page">
                <div class="chatArea">
                    <ul class="messages" id="messages"></ul>
                </div>
                <input id="input" class="inputMessage" placeholder="{{username}}, type here..." autocomplete="off" />
            </li>

        </ul>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();

        var messages = document.getElementById('messages');
        var input = document.getElementById('input');

        const COLORS = [
            '#e21400', '#91580f', '#f8a700', '#f78b00',
            '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
            '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
        ];

        // Gets the color of a username through our hash function
        const getUsernameColor = (username) => {
            // Compute hash code
            let hash = 7;
            for (let i = 0; i < username.length; i++) {
                hash = username.charCodeAt(i) + (hash << 5) - hash;
            }
            // Calculate color
            const index = Math.abs(hash % COLORS.length);
            return COLORS[index];
        }

        input.addEventListener('keyup', (e) => {
            console.log('keyCode = ', e.keyCode)
            e.preventDefault();
            //Auto - focus the current input when a key is typed
            if (!(e.ctrlKey || e.metaKey || e.altKey)) {
                input.focus();
            }
            //When the client hits ENTER on their keyboard
            if (e.keyCode == 65) {
                //if (username) {
                //sendMessage();
                socket.emit('chat message', {
                    message: input.value
                });
                console.log('chat message = ', input.value);
                input.value = '';
                input.focus();
                //return false

                //} 
            }

        });

        socket.on('chat message', function(msg) {
            var item = document.createElement('li');
            item.textContent = msg.message;
            console.log('message = ', msg)
            item.style.cssText = "color: "+getUsernameColor(msg.username);//item.style.color = 'blue';//elt.style.cssText = "color: blue
            console.log('color = ', getUsernameColor(msg.username));
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

        socket.on('connected', function(msg) {
            var item = document.createElement('li');
            item.textContent = msg.message;
            item.className = "log"
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

        socket.on('disconnected', function(msg) {
            var item = document.createElement('li');
            item.textContent = msg;
            item.className = "log"
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

    </script>
</body>

</html>
